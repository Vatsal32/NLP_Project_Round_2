whereas driver (las vegas)(GPE) may never notice problem difficulty definitions take account severity failure consequences unavailability people naturally concerned system failures serious consequences perception system reliability influenced consequences example say failure initialisation engine management software causes car engine cut immediately starting operates correctly restart corrects initialisation problem affect normal operation car many drivers would think repair needed contrast drivers think engine cuts driving high speed per month say unreliable unsafe must repaired strict definition reliability relates system implementation specification system behaving reliably behaviour consistent defined specification however common cause perceived unreliability system specification match expectations system users unfortunately many specifications incomplete incorrect left software engineers interpret system behave domain experts may therefore implement behaviour users expect reliability availability compromised system failures may failure provide service failure deliver service specified delivery service way unsafe insecure failures consequence specification errors failures associated systems telecommunications system however many failures consequence erroneous system behaviour derives faults system discussing reliability helpful distinguish terms fault error failure may parts system never used faults necessarily result system errors faulty state may transient may corrected erroneous behaviour occurs system errors may result system failures behaviour may also transient observable effects system may deliver service expected users unexpected system users error example failure initialise variable could lead variable wrong value used include protection ensures erroneous behaviour discovered corrected system services affected system faults examples techniques include avoiding errorprone programming language constructs pointers use static analysis detect program anomalies increase chances faults detected removed system used systematic system testing debugging example faultdetection technique system errors ensure system errors result system failures incorporation selfchecking facilities system use redundant system modules examples fault tolerance techniques cover development fault tolerant systems chapter 20 also discuss techniques fault avoidance discuss processbased approaches fault avoidance chapter 27 fault detection chapters 22 23 software faults cause software failures faulty code executed set inputs expose software fault code works properly inputs program responds producing corresponding output example given input url web browser produces output display requested web page inputoutput erroneous outputs mapping program erroneous outputs inputs input combinations shown shaded ellipse figure probability particular execution program system input member set inputs cause erroneous output occur input causing erroneous output associated frequently used part program failures frequent however associated rarely used code users hardly ever see failures user system uses different ways faults affect reliability system one user may never revealed someone elses mode 1 user 3 however never use inputs erroneous set software always reliable possible inputs user user 3 2 overall reliability program therefore mostly depends number inputs causing erroneous outputs normal use system users software faults occur exceptional situations little effect systems reliability removing software faults parts system rarely used makes little real difference reliability seen system users mills et al mills et al 1987 found software removing 60 known errors software led 3 reliability improvement adams adams 1984 study (ibm)(ORG) software products noted many defects products likely cause failures hundreds thousands months product usage users sociotechnical system may adapt software known faults may share information get around problems may avoid using inputs known cause problems program failures never arise furthermore experienced users often work around software faults known cause failures deliberately avoid using system features know cause problems example avoid certain features automatic numbering word processing system used write book repairing faults features may make practical difference reliability seen users safetycritical systems systems essential system operation always safe system never damage people systems environment even system fails examples safetycritical systems control monitoring systems aircraft process control systems chemical pharmaceutical plants automobile control systems hardware control safetycritical systems simpler implement analyse software control however build systems complexity controlled hardware alone software control essential need manage large numbers sensors actuators complex control laws example complexity found advanced aerodynamically unstable military aircraft require continual softwarecontrolled adjustment flight surfaces ensure crash safetycritical software falls two classes type software injury examples systems computeraided engineering design systems whose malfunctioning might result design fault object designed fault may cause injury people designed system malfunctions another example secondary safetycritical system medical database holding details drugs administered patients errors system might result incorrect drug dosage administered system reliability system safety related separate dependability attributes course safetycritical system reliable conform specification operate without failures may incorporate faulttolerant features provide continuous service even faults occur however faulttolerant systems necessarily safe software may still malfunction cause system behaviour results accident apart fact never 100 certain software system faultfree faulttolerant several reasons software systems reliable necessarily safe system critical situations high percentage system malfunctions (nakajo kume)(PER) 1991 (lutz)(PER) 1993 result specification rather design errors study errors embedded systems (lutz)(PER) concludes difficulties requirements key root cause safetyrelated software errors persisted integration system testing way may present software unanticipated environment components close failure may behave erratically generate signals outside ranges handled software situations lead system malfunction anecdotal example mechanic instructed utility management software aircraft raise undercarriage software carried mechanics instruction perfectly unfortunately plane ground timeâ€”clearly system disallowed command unless plane air specialised vocabulary evolved discuss safetycritical systems key assuring safety ensure either accidents occur consequences accident minimal achieved three complementary ways time operate machine avoids hazard operators hands blade pathway human death injury damage property environment computercontrolled machine injuring operator example accident accident failure sensor detects obstacle front machine example hazard range many people killed result accident minor injury property damage particular hazard hazard severity range catastrophic many people killed minor minor damage results probability values tend arbitrary range probable say 1100 chance hazard occurring implausible conceivable situations likely hazard could occur accident risk assessed considering hazard probability hazard severity probability hazard result accident removed result accident example chemical plant system may detect excessive pressure open relief valve reduce pressure explosion occurs damage may result accident example aircraft engine normally includes automatic fire extinguishers fire occurs often controlled poses threat aircraft accidents generally occur several things go wrong time analysis serious accidents perrow 1984 suggests almost due combination malfunctions rather single failures unanticipated combination led interactions resulted system failure perrow also suggests impossible anticipate possible combinations system
